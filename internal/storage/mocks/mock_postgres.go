// Code generated by MockGen. DO NOT EDIT.
// Source: project/internal/storage/postgres (interfaces: TransactionManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	postgres "project/internal/storage/postgres"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionManager is a mock of TransactionManager interface.
type MockTransactionManager struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionManagerMockRecorder
}

// MockTransactionManagerMockRecorder is the mock recorder for MockTransactionManager.
type MockTransactionManagerMockRecorder struct {
	mock *MockTransactionManager
}

// NewMockTransactionManager creates a new mock instance.
func NewMockTransactionManager(ctrl *gomock.Controller) *MockTransactionManager {
	mock := &MockTransactionManager{ctrl: ctrl}
	mock.recorder = &MockTransactionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionManager) EXPECT() *MockTransactionManagerMockRecorder {
	return m.recorder
}

// GetQueryEngine mocks base method.
func (m *MockTransactionManager) GetQueryEngine(arg0 context.Context) postgres.QueryEngine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryEngine", arg0)
	ret0, _ := ret[0].(postgres.QueryEngine)
	return ret0
}

// GetQueryEngine indicates an expected call of GetQueryEngine.
func (mr *MockTransactionManagerMockRecorder) GetQueryEngine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryEngine", reflect.TypeOf((*MockTransactionManager)(nil).GetQueryEngine), arg0)
}

// RunReadUncommitted mocks base method.
func (m *MockTransactionManager) RunReadUncommitted(arg0 context.Context, arg1 func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunReadUncommitted", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunReadUncommitted indicates an expected call of RunReadUncommitted.
func (mr *MockTransactionManagerMockRecorder) RunReadUncommitted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunReadUncommitted", reflect.TypeOf((*MockTransactionManager)(nil).RunReadUncommitted), arg0, arg1)
}

// RunSerializable mocks base method.
func (m *MockTransactionManager) RunSerializable(arg0 context.Context, arg1 func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunSerializable", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunSerializable indicates an expected call of RunSerializable.
func (mr *MockTransactionManagerMockRecorder) RunSerializable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSerializable", reflect.TypeOf((*MockTransactionManager)(nil).RunSerializable), arg0, arg1)
}
